import org.gradle.internal.os.OperatingSystem

buildscript {
    ext {
        //noinspection GroovyAssignabilityCheck
        currentOS = OperatingSystem.current()
        isRunningInIdea = Boolean.parseBoolean(System.getProperty("idea.active"))
        isSupportJavaModule = JavaVersion.current().toString().toFloat() > 1.8 || JavaVersion.current().isJava10()
    }
    repositories {
        maven {
            url "https://maven.aliyun.com/repository/gradle-plugin"
        }
        google {
            setUrl("https://maven.aliyun.com/repository/google")
        }
        jcenter {
            setUrl("https://maven.aliyun.com/repository/public")
        }
        mavenCentral {
            url "https://maven.aliyun.com/repository/central"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        if (isSupportJavaModule) {
            classpath 'org.openjfx:javafx-plugin:0.0.9'
            classpath 'org.beryx:badass-jlink-plugin:2.21.2'
        }
    }
}

apply plugin: "kotlin"
apply plugin: "application"
def descriptionProperties = new Properties() {
    {
        load(new FileInputStream(new File("src/main/resources/discription.properties")))
    }
}

group = "org.ning1994.net_assist"
version = descriptionProperties.get("version.name")

application {
    mainClassName = "org.ning1994.net_assist.Launcher"
}

if (isSupportJavaModule) {
    apply from: "build-java-modules.gradle"
} else {
    apply from: "build-java.gradle"
}
repositories {
    google {
        url "https://maven.aliyun.com/repository/google"
    }
    jcenter {
        url "https://maven.aliyun.com/repository/public"
    }
    mavenCentral {
        url "https://maven.aliyun.com/repository/central"
    }
}

dependencies {
    api("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")
    api("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
    api("no.tornado:tornadofx:1.7.20") {
        exclude group: "org.jetbrains.kotlin"
        exclude group: "org.glassfish"
    }
    api("io.netty:netty-all:4.1.51.Final")
}


compileKotlin {
    String jvmTargetString = JavaVersion.current().toString()
    if (JavaVersion.current().isJava10()) {
        jvmTargetString = "10"
        println("不支持java10")
    } else if (JavaVersion.current().isJava9()) {
        jvmTargetString = "9"
        println("不支持java9")
    }
    kotlinOptions.jvmTarget = jvmTargetString
}

configurations {
    api {
        setCanBeConsumed(true)
        setCanBeResolved(true)
    }
}
task runnableJar(type: Jar, dependsOn: [jar], group: "build") {
    manifest {
        attributes(
                "Manifest-Version": project.version,
//                "Class-Path": configurations.api.collect { it.getName() }.join(" "),
                "Main-Class": mainClassName
        )
    }
    def sourceTree = configurations.api.collect { entry -> zipTree(entry) }
    sourceTree.add(zipTree(jar.archiveFile.get().asFile))//加入项目源码编译后的jar
    from(sourceTree) {
        exclude "META-INF/MANIFEST.MF"
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    archiveName("${archiveBaseName.get()}-${JavaVersion.current().toString()}-v${archiveVersion.get()}.${archiveExtension.get()}")
    destinationDir(file("out/runnableJar"))
}

